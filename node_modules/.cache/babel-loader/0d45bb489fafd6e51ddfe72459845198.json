{"ast":null,"code":"import _slicedToArray from \"D:/task/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\n\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  var _theme$colorSchemes = theme.colorSchemes,\n      colorSchemes = _theme$colorSchemes === void 0 ? {} : _theme$colorSchemes,\n      _theme$defaultColorSc = theme.defaultColorScheme,\n      defaultColorScheme = _theme$defaultColorSc === void 0 ? 'light' : _theme$defaultColorSc,\n      otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n\n  var _cssVarsParser = cssVarsParser(otherTheme, parserConfig),\n      rootVars = _cssVarsParser.vars,\n      rootCss = _cssVarsParser.css,\n      rootVarsWithDefaults = _cssVarsParser.varsWithDefaults;\n\n  var themeVars = rootVarsWithDefaults;\n  var colorSchemesMap = {};\n\n  var light = colorSchemes[defaultColorScheme],\n      otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n\n  Object.entries(otherColorSchemes || {}).forEach(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        key = _ref2[0],\n        scheme = _ref2[1];\n\n    var _cssVarsParser2 = cssVarsParser(scheme, parserConfig),\n        vars = _cssVarsParser2.vars,\n        css = _cssVarsParser2.css,\n        varsWithDefaults = _cssVarsParser2.varsWithDefaults;\n\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css: css,\n      vars: vars\n    };\n  });\n\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    var _cssVarsParser3 = cssVarsParser(light, parserConfig),\n        css = _cssVarsParser3.css,\n        vars = _cssVarsParser3.vars,\n        varsWithDefaults = _cssVarsParser3.varsWithDefaults;\n\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css: css,\n      vars: vars\n    };\n  }\n\n  var generateCssVars = function generateCssVars(colorScheme) {\n    var _parserConfig$getSele2;\n\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n\n      var _css = _extends({}, rootCss);\n\n      return {\n        css: _css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, _css)) || ':root'\n      };\n    }\n\n    var css = _extends({}, colorSchemesMap[colorScheme].css);\n\n    return {\n      css: css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n\n  return {\n    vars: themeVars,\n    generateCssVars: generateCssVars\n  };\n}\n\nexport default prepareCssVars;","map":{"version":3,"names":["_extends","_toPropertyKey","_objectWithoutPropertiesLoose","_excluded","deepmerge","cssVarsParser","prepareCssVars","theme","parserConfig","colorSchemes","defaultColorScheme","otherTheme","rootVars","vars","rootCss","css","rootVarsWithDefaults","varsWithDefaults","themeVars","colorSchemesMap","light","otherColorSchemes","map","Object","entries","forEach","key","scheme","generateCssVars","colorScheme","_parserConfig$getSele2","_parserConfig$getSele","selector","getSelector","call"],"sources":["D:/task/node_modules/@mui/system/esm/cssVars/prepareCssVars.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"colorSchemes\", \"components\", \"defaultColorScheme\"];\nimport deepmerge from '@mui/utils/deepmerge';\nimport cssVarsParser from './cssVarsParser';\nfunction prepareCssVars(theme, parserConfig) {\n  // @ts-ignore - ignore components do not exist\n  const {\n      colorSchemes = {},\n      defaultColorScheme = 'light'\n    } = theme,\n    otherTheme = _objectWithoutPropertiesLoose(theme, _excluded);\n  const {\n    vars: rootVars,\n    css: rootCss,\n    varsWithDefaults: rootVarsWithDefaults\n  } = cssVarsParser(otherTheme, parserConfig);\n  let themeVars = rootVarsWithDefaults;\n  const colorSchemesMap = {};\n  const {\n      [defaultColorScheme]: light\n    } = colorSchemes,\n    otherColorSchemes = _objectWithoutPropertiesLoose(colorSchemes, [defaultColorScheme].map(_toPropertyKey));\n  Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {\n    const {\n      vars,\n      css,\n      varsWithDefaults\n    } = cssVarsParser(scheme, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[key] = {\n      css,\n      vars\n    };\n  });\n  if (light) {\n    // default color scheme vars should be merged last to set as default\n    const {\n      css,\n      vars,\n      varsWithDefaults\n    } = cssVarsParser(light, parserConfig);\n    themeVars = deepmerge(themeVars, varsWithDefaults);\n    colorSchemesMap[defaultColorScheme] = {\n      css,\n      vars\n    };\n  }\n  const generateCssVars = colorScheme => {\n    var _parserConfig$getSele2;\n    if (!colorScheme) {\n      var _parserConfig$getSele;\n      const css = _extends({}, rootCss);\n      return {\n        css,\n        vars: rootVars,\n        selector: (parserConfig == null || (_parserConfig$getSele = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele.call(parserConfig, colorScheme, css)) || ':root'\n      };\n    }\n    const css = _extends({}, colorSchemesMap[colorScheme].css);\n    return {\n      css,\n      vars: colorSchemesMap[colorScheme].vars,\n      selector: (parserConfig == null || (_parserConfig$getSele2 = parserConfig.getSelector) == null ? void 0 : _parserConfig$getSele2.call(parserConfig, colorScheme, css)) || ':root'\n    };\n  };\n  return {\n    vars: themeVars,\n    generateCssVars\n  };\n}\nexport default prepareCssVars;"],"mappings":"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"},"metadata":{},"sourceType":"module"}